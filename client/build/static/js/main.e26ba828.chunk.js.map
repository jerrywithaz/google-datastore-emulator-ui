{"version":3,"sources":["providers/ReactQueryProvider.tsx","api/api.ts","hooks/useKinds.ts","hooks/useEntitiesByKind.ts","utils/getColumnHeaders.ts","pages/Entities/Entities.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["queryClient","QueryClient","ReactQueryProvider","children","client","api","axios","create","baseURL","getKinds","a","get","result","data","useKinds","options","useQuery","kind","useEntitiesByKind","getEntitiesByKind","enabled","getColumnHeaders","headers","forEach","item","Object","keys","key","includes","push","sort","Entities","useState","setKind","onSuccess","kinds","isLoadingKinds","isLoading","entities","isLoadingEntities","columnHeaders","useMemo","dataGridColumns","map","columnHeader","field","headerName","flex","valueFormatter","params","Array","isArray","value","JSON","stringify","console","log","Box","FormControl","InputLabel","id","Select","autoWidth","placeholder","onChange","e","target","label","labelId","MenuItem","height","width","marginTop","rows","columns","pageSize","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","loading","App","display","flexDirection","AppBar","position","Toolbar","IconButton","size","edge","color","aria-label","sx","mr","Typography","variant","component","flexGrow","Button","padding","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e26ba828.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    QueryClient,\n    QueryClientProvider,\n  } from 'react-query'\n\nconst queryClient = new QueryClient();\n\nconst ReactQueryProvider: React.FC = ({ children }) => {\n    return (\n        <QueryClientProvider client={queryClient}>\n            {children}\n        </QueryClientProvider>\n    );\n}\n\nexport default ReactQueryProvider;","import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'http://localhost:8002'\n});\n\nexport default api;","import { useQuery, UseQueryOptions } from \"react-query\";\nimport api from \"../api\";\n\ntype UseKindsOptions =\n  | Omit<\n      UseQueryOptions<string[], unknown, string[], \"kinds\">,\n      \"queryKey\" | \"queryFn\"\n    >\n  | undefined;\n\nasync function getKinds() {\n  const result = await api.get<string[]>(\"/datastore/kinds\");\n\n  return result.data;\n}\n\nfunction useKinds(options?: UseKindsOptions) {\n  return useQuery(\"kinds\", getKinds, options);\n}\n\nexport default useKinds;\n","import { useQuery, UseQueryOptions } from \"react-query\";\nimport api from \"../api\";\n\ntype UseEntitiesByKindOptions =\n  | Omit<\n      UseQueryOptions<\n        Record<string, unknown>[],\n        unknown,\n        Record<string, unknown>[],\n        string[]\n      >,\n      \"queryKey\" | \"queryFn\"\n    >\n  | undefined;\n\nasync function getEntitiesByKind(kind: string) {\n  const result = await api.get<Record<string, unknown>[]>(\n    `/datastore/entities/${kind}`\n  );\n\n  return result.data;\n}\n\nfunction useEntitiesByKind(kind: string, options?: UseEntitiesByKindOptions) {\n  return useQuery([\"entitiesByKind\", kind], () => getEntitiesByKind(kind), {\n    ...options,\n    enabled: !!kind,\n  });\n}\n\nexport default useEntitiesByKind;\n","function getColumnHeaders(data: Record<string, unknown>[]) {\n    const headers: string[] = [];\n\n    data.forEach((item) => {\n        const keys = Object.keys(item);\n\n        keys.forEach((key) => {\n            if (!headers.includes(key)) {\n                headers.push(key)\n            }\n        })\n    });\n\n    return headers.sort();\n}\n\nexport default getColumnHeaders;","import React, { useMemo, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Select from \"@mui/material/Select\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport useKinds from \"../../hooks/useKinds\";\nimport useEntitiesByKind from \"../../hooks/useEntitiesByKind\";\nimport getColumnHeaders from \"../../utils/getColumnHeaders\";\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\n\nconst Entities: React.FC = () => {\n  const [kind, setKind] = useState<string>(\"\");\n\n  const { data: kinds = [], isLoading: isLoadingKinds } = useKinds({\n    onSuccess: (data) => {\n      if (!kind) setKind(data[0]);\n    },\n  });\n\n  const { data: entities = [], isLoading: isLoadingEntities } = useEntitiesByKind(kind);\n\n  const columnHeaders = useMemo(() => {\n    return getColumnHeaders(entities);\n  }, [entities]);\n\n  const dataGridColumns = useMemo<GridColDef[]>(() => {\n    return columnHeaders.map((columnHeader) => ({\n      field: columnHeader,\n      headerName: columnHeader,\n      flex: 1,\n      valueFormatter: (params) => {\n        if (Array.isArray(params.value) || typeof params.value === \"object\") {\n          return JSON.stringify(params.value);\n        }\n        return params.value;\n      },\n    }));\n  }, [columnHeaders]);\n\n  console.log(columnHeaders);\n\n  return (\n    <Box>\n      <FormControl>\n        <InputLabel id=\"kinds-select-label\">Kinds</InputLabel>\n        <Select\n          autoWidth\n          placeholder=\"Kinds\"\n          value={kind}\n          onChange={(e) => setKind(e.target.value)}\n          label=\"Kinds\"\n          labelId=\"kinds-select-label\"\n          id=\"kinds-select\"\n        >\n          {kinds.map((kind) => {\n            return (\n              <MenuItem key={kind} value={kind}>\n                {kind}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </FormControl>\n      <Box height={600} width=\"100%\" marginTop=\"20px\">\n        <DataGrid\n          rows={entities}\n          columns={dataGridColumns}\n          pageSize={25}\n          rowsPerPageOptions={[5, 25, 50, 100]}\n          checkboxSelection\n          disableSelectionOnClick\n          loading={isLoadingEntities || isLoadingKinds}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport default Entities;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport ReactQueryProvider from \"./providers/ReactQueryProvider\";\nimport Entities from \"./pages/Entities\";\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <ReactQueryProvider>\n        <Box height=\"100%\" width=\"100%\" display=\"flex\" flexDirection=\"column\">\n          <Box>\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton\n                  size=\"large\"\n                  edge=\"start\"\n                  color=\"inherit\"\n                  aria-label=\"menu\"\n                  sx={{ mr: 2 }}\n                >\n                  <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                  Google Datastore Emulator UI\n                </Typography>\n                <Button color=\"inherit\">Login</Button>\n              </Toolbar>\n            </AppBar>\n          </Box>\n          <Box flex={1} padding=\"20px\">\n            <Switch>\n              <Route path=\"/\" component={Entities} />\n            </Switch>\n          </Box>\n        </Box>\n      </ReactQueryProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}