{"version":3,"sources":["providers/ReactQueryProvider.tsx","api/api.ts","hooks/useKinds.ts","hooks/useEntitiesByKind.ts","utils/getColumnHeaders.ts","pages/Entities/Entities.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["queryClient","QueryClient","defaultOptions","queries","refetchOnMount","refetchOnWindowFocus","ReactQueryProvider","children","client","api","axios","create","baseURL","getKinds","a","get","result","data","useKinds","options","useQuery","kind","page","pageSize","params","useEntitiesByKind","useState","setPage","setPageSize","rowCount","setRowCount","toString","getEntitiesByKind","enabled","onSuccess","moreResults","info","changePage","getColumnHeaders","headers","forEach","item","Object","keys","key","includes","push","sort","indexOfId","findIndex","header","toLowerCase","splice","unshift","Entities","setKind","kinds","isLoadingKinds","isLoading","entitiesData","isLoadingEntities","fetchEntities","refetch","isRefetchingEntities","isRefetching","columnHeaders","useMemo","entities","dataGridColumns","map","columnHeader","field","headerName","flex","valueFormatter","Array","isArray","value","JSON","stringify","minWidth","Box","FormControl","InputLabel","id","Select","autoWidth","placeholder","onChange","e","target","label","labelId","MenuItem","height","width","marginTop","pagination","paginationMode","rows","columns","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","loading","onPageChange","onPageSizeChange","componentsProps","labelDisplayedRows","from","to","nextIconButtonProps","disabled","App","display","flexDirection","AppBar","position","Toolbar","IconButton","size","edge","color","sx","mr","Typography","variant","component","flexGrow","Button","padding","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dc46bcb.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    QueryClient,\n    QueryClientProvider,\n  } from 'react-query'\n  import { ReactQueryDevtools } from 'react-query/devtools'\n\nconst queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            refetchOnMount: false,\n            refetchOnWindowFocus: false\n        },\n    }\n});\n\nconst ReactQueryProvider: React.FC = ({ children }) => {\n    return (\n        <QueryClientProvider client={queryClient}>\n            {children}\n            <ReactQueryDevtools />\n        </QueryClientProvider>\n    );\n}\n\nexport default ReactQueryProvider;","import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'http://localhost:8002'\n});\n\nexport default api;","import { useQuery, UseQueryOptions } from \"react-query\";\nimport api from \"../api\";\n\ntype UseKindsOptions =\n  | Omit<\n      UseQueryOptions<string[], unknown, string[], \"kinds\">,\n      \"queryKey\" | \"queryFn\"\n    >\n  | undefined;\n\nasync function getKinds() {\n  const result = await api.get<string[]>(\"/datastore/kinds\");\n\n  return result.data;\n}\n\nfunction useKinds(options?: UseKindsOptions) {\n  return useQuery(\"kinds\", getKinds, options);\n}\n\nexport default useKinds;\n","import { useState } from \"react\";\nimport { useQuery, UseQueryOptions } from \"react-query\";\nimport api from \"../api\";\n\ntype RunQueryInfo = {\n  endCursor?: string;\n  moreResults?: 'MORE_RESULTS_TYPE_UNSPECIFIED' | 'NOT_FINISHED' | 'MORE_RESULTS_AFTER_LIMIT' | 'MORE_RESULTS_AFTER_CURSOR' | 'NO_MORE_RESULTS';\n}\n\ntype Result = {\n  info: RunQueryInfo;\n  entities: Record<string, unknown>[];\n};\n\ntype UseEntitiesByKindOptions =\n  | Omit<\n      UseQueryOptions<unknown, unknown, Result, string[]>,\n      \"queryKey\" | \"queryFn\"\n    >\n  | undefined;\n\nasync function getEntitiesByKind(kind: string, page: number, pageSize: number) {\n  const result = await api.get<Result>(`/datastore/entities/${kind}`, {\n    params: { page, pageSize }\n  });\n\n  return result.data;\n}\n\nfunction useEntitiesByKind(kind: string, options?: UseEntitiesByKindOptions) {\n  // const [pageCursor, setPageCursor] = useState<string>('');\n  const [page, setPage] = useState(0);\n  const [pageSize, setPageSize] = useState(10);\n  const [rowCount, setRowCount] = useState(pageSize);\n\n  const result = useQuery([\"entitiesByKind\", kind, page.toString(), pageSize.toString()], () => getEntitiesByKind(kind, page, pageSize), {\n    ...options,\n    enabled: !!kind,\n    onSuccess: (data) => {\n      const { moreResults } = data.info;\n\n      if (moreResults === 'MORE_RESULTS_AFTER_LIMIT' || moreResults === 'MORE_RESULTS_AFTER_CURSOR') {\n        setRowCount((page + 2) * pageSize);\n      }\n    },\n  });\n\n  return { result, changePage: setPage, page, setPageSize, pageSize, rowCount };\n}\n\nexport default useEntitiesByKind;\n","function getColumnHeaders(data: Record<string, unknown>[]) {\n    const headers: string[] = [];\n\n    data.forEach((item) => {\n        const keys = Object.keys(item);\n\n        keys.forEach((key) => {\n            if (!headers.includes(key)) {\n                headers.push(key)\n            }\n        })\n    });\n\n\n    headers.sort();\n\n    const indexOfId = headers.findIndex((header) => header.toLowerCase() === 'id');\n\n    if (indexOfId > -1) {\n        const header = headers[indexOfId];\n\n        headers.splice(indexOfId, 1);\n\n        headers.unshift(header);\n    }\n\n    return headers;\n}\n\nexport default getColumnHeaders;","import React, { useMemo, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Select from \"@mui/material/Select\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport useKinds from \"../../hooks/useKinds\";\nimport useEntitiesByKind from \"../../hooks/useEntitiesByKind\";\nimport getColumnHeaders from \"../../utils/getColumnHeaders\";\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\nimport { LabelDisplayedRowsArgs } from \"@mui/material\";\n\nconst Entities: React.FC = () => {\n  const [kind, setKind] = useState<string>(\"\");\n\n  const { data: kinds = [], isLoading: isLoadingKinds } = useKinds({\n    onSuccess: (data) => {\n      if (!kind) setKind(data[0]);\n    },\n  });\n\n  const {\n    result: {\n      data: entitiesData,\n      isLoading: isLoadingEntities,\n      refetch: fetchEntities,\n      isRefetching: isRefetchingEntities\n    },\n    changePage,\n    page,\n    pageSize,\n    setPageSize,\n    rowCount\n  } = useEntitiesByKind(kind);\n\n  const columnHeaders = useMemo(() => {\n    return getColumnHeaders(entitiesData?.entities || []);\n  }, [entitiesData]);\n\n  const dataGridColumns = useMemo<GridColDef[]>(() => {\n    return columnHeaders.map((columnHeader) => ({\n      field: columnHeader,\n      headerName: columnHeader,\n      flex: 1,\n      valueFormatter: (params) => {\n        if (Array.isArray(params.value) || typeof params.value === \"object\") {\n          return JSON.stringify(params.value);\n        }\n        return params.value;\n      },\n      minWidth: 200,\n    }));\n  }, [columnHeaders]);\n\n  return (\n    <Box>\n      <FormControl>\n        <InputLabel id=\"kinds-select-label\">Kinds</InputLabel>\n        <Select\n          autoWidth\n          placeholder=\"Kinds\"\n          value={kind}\n          onChange={(e) => setKind(e.target.value)}\n          label=\"Kinds\"\n          labelId=\"kinds-select-label\"\n          id=\"kinds-select\"\n        >\n          {kinds.map((kind) => {\n            return (\n              <MenuItem key={kind} value={kind}>\n                {kind}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </FormControl>\n      <Box height={600} width=\"100%\" marginTop=\"20px\">\n        <DataGrid\n          pagination\n          paginationMode=\"server\"\n          rows={entitiesData?.entities || []}\n          rowCount={rowCount}\n          columns={dataGridColumns}\n          pageSize={pageSize}\n          page={page}\n          rowsPerPageOptions={[5, 10, 25, 50, 100]}\n          checkboxSelection\n          disableSelectionOnClick\n          loading={isLoadingEntities || isLoadingKinds || isRefetchingEntities}\n          onPageChange={(page) => {\n            changePage(page);\n            fetchEntities();\n          }}\n          onPageSizeChange={setPageSize}\n          componentsProps={{\n            pagination: {\n              labelDisplayedRows: ({ from, to }: LabelDisplayedRowsArgs) => {\n                return `${from}-${to} of many`;\n              },\n              nextIconButtonProps: {\n                disabled: false\n              }\n            }\n          }}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport default Entities;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport ReactQueryProvider from \"./providers/ReactQueryProvider\";\nimport Entities from \"./pages/Entities\";\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <ReactQueryProvider>\n        <Box height=\"100%\" width=\"100%\" display=\"flex\" flexDirection=\"column\">\n          <Box>\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton\n                  size=\"large\"\n                  edge=\"start\"\n                  color=\"inherit\"\n                  aria-label=\"menu\"\n                  sx={{ mr: 2 }}\n                >\n                  <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                  Google Datastore Emulator UI\n                </Typography>\n                <Button color=\"inherit\">Login</Button>\n              </Toolbar>\n            </AppBar>\n          </Box>\n          <Box flex={1} padding=\"20px\">\n            <Switch>\n              <Route path=\"/\" component={Entities} />\n            </Switch>\n          </Box>\n        </Box>\n      </ReactQueryProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}